import pandas as pd
import numpy
import os
import duckdb
import glob
import time
import os

def Exploitation_AT(trust_dir,pers_dir,exp_dir):
    con = duckdb.connect(database= os.path.join(trust_dir, 'trusted_AT.duckdb'), read_only=False)
    con.execute("SHOW TABLES").fetchall()

    tables= ["GDP_growth", "Birth_certificates", "C02_production_per_capita", "Corruption_estimation", "Access_to_electricity", "GDP_2020"]
    data = []
    for i in tables:
        df =  con.execute(f'SELECT * FROM {i}').df()
        data.append(df)
    
    merged_1 = pd.merge(data[0],data[1],left_on = ['Country','time'], right_on =['Country','time'])
    merged_2 = pd.merge(merged_1,data[2],left_on = ['Country','time'], right_on =['Country','time'])
    merged_3 = pd.merge(merged_2,data[3],left_on = ['Country','time'], right_on =['Country','time'])
    merged_4 = pd.merge(merged_3,data[4],left_on = ['Country','time'], right_on =['Country','time'])
    merged_5 = pd.merge(merged_4,data[5],left_on = ['Country'], right_on =['Country'])

    merged_WBG = merged_5

    #load additional data
    file_list = os.listdir(pers_dir)
    # Initialize datafram   es to store the data
    for file in file_list:
        if file.endswith(".csv"):
            # Check if the file name contains "owid" or "worldometer"
            if "owid_preprocessed" in file:
                owid = pd.read_csv(pers_dir+file)
                owid_p=pers_dir+file
            elif "Worldometer_preprocessed" in file:
                worldometer = pd.read_csv(pers_dir+file)
                world_p=pers_dir+file

    owid.drop(['Unnamed: 0'],axis=1,inplace=True)
    worldometer.drop(['Unnamed: 0'],axis=1,inplace=True)

    merged_owwo = pd.merge(worldometer,owid,left_on = ['Country,Other','Date'], right_on =['location','date'])
    average = ((merged_owwo['Population'] + merged_owwo['population']) / 2).round()
    merged_owwo['Population'] = average
    merged_owwo = merged_owwo.drop(['population'], axis=1)

    merged_df = pd.merge(merged_owwo,merged_WBG,left_on = ['Country,Other'], right_on =['Country'])
    merged_df = merged_df.drop(['Country'], axis=1)
    merged_df = merged_df.rename(columns={"Country,Other": "Country"})

    merged_df = merged_df.rename(columns={'GDP growth':'GDP_growth',	'Birth certificates': 'Birth_certificates',
                                        'C02 production per capita':'C02_production_per_capita',	'Corruption estimation':'Corruption_estimation',
                                        'Access to electricity':'Access_to_electricity' })
    
    #load the duckdb database with info
    con = duckdb.connect(database= os.path.join(exp_dir, 'exploitation_AT.duckdb'), read_only=False)
    con.execute(f'DROP TABLE IF EXISTS Merged_incl_WBG')
    con.execute("CREATE TABLE IF NOT EXISTS Merged_incl_WBG AS SELECT * FROM merged_df;")

    table_configs = [
        {
            'columns': "Date, Country, Population, Continent, GDP2020",
            'table_name': 'Country_info'
        },
        {
            'columns': "Date, Country, Population, human_development_index, life_expectancy, male_smokers, female_smokers, median_age",
            'table_name': 'Population_Health'
        },
        {
            'columns': "Date, Country, new_vaccinations, total_vaccinations, people_vaccinated, TotalCases, TotalDeaths, TotalRecovered, ActiveCases",
            'table_name': 'Pandemic'
        },
        {
            'columns': "Date, Country, GDP_growth,	Birth_certificates,	C02_production_per_capita, Corruption_estimation,	Access_to_electricity, Population",
            'table_name': 'Development'
        }
    ]

    # Iterate through the list of dictionaries and create tables
    for config in table_configs:
        columns_to_select = config['columns']
        table_name = config['table_name']

        # Create the SQL query
        query = f"CREATE TABLE {table_name} AS SELECT {columns_to_select} FROM Merged_incl_WBG"

        # Drop the table if it already exists
        con.execute(f'DROP TABLE IF EXISTS {table_name}')

        # Execute the SQL query to create the new table
        con.execute(query)
    #Close the connection
    con.execute('DROP TABLE IF EXISTS Merged_incl_WBG')
    con.close()

'''
rel_path = os.path.dirname(os.path.abspath(__name__))
trust_dir=rel_path+'/AdvancedTopic/Trusted'
pers_dir=rel_path+'/DataManagementBackbone/Landing/Persistent/'
exp_dir=rel_path+'/AdvancedTopic/Exploitation'
Exploitation_AT(trust_dir,pers_dir,exp_dir)
'''