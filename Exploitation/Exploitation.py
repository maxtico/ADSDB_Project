import glob
import time
import os
import pandas as pd
import numpy as np

def Exploitation(filepath):
    conn = duckdb.connect(database= os.path.join(filepath,"exploitation.duckdb"),read_only=False)
    # Display our tables in duckdb
    file_list = os.listdir(filepath)
    # Initialize dataframes to store the data
    for file in file_list:
        if file.endswith(".csv"):
            # Check if the file name contains "owid" or "worldometer"
            if "Owid_preprocessed" in file:
                owid = pd.read_csv(filepath+file)
                owid_p=filepath+file
            elif "Worldometer_preprocessed" in file:
                worldometer = pd.read_csv(filepath+file)
                world_p=filepath+file
    # Cleaning
    owid.drop(['Unnamed: 0'],axis=1,inplace=True)
    worldometer.drop(['Unnamed: 0'],axis=1,inplace=True)

    # Merging dataframes
    merged_df = pd.merge(worldometer,owid,left_on = ['Country,Other','Date'], right_on =['location','date'])
    #Remove redundant columns
    merged_df = merged_df.drop(['date', 'location'], axis=1)  
    # Dealing with two populations
    average = ((merged_df['Population'] + merged_df['population']) / 2).round() #.astype(int)
    merged_df['Population'] = average
    merged_df = merged_df.drop(['population'], axis=1) 
    # Saving them into a Database
    fnames = [world_p, owid_p]
    tnames = ['Worldometer', 'Owid']
    for i in range(len(fnames)):
        conn.execute(f'DROP TABLE IF EXISTS {tnames[i]}')
        conn.execute(f"CREATE TABLE IF NOT EXISTS {tnames[i]} AS SELECT * FROM read_csv_auto('{fnames[i]}',header=True);")

    conn.execute(f'DROP TABLE IF EXISTS Merged')
    conn.execute("CREATE TABLE IF NOT EXISTS Merged AS SELECT * FROM merged_df;")
    #Close the connection
    conn.close()

    con = duckdb.connect(database= os.path.join(filepath, 'exploitation.duckdb'), read_only=False)
    table_configs = [
        {
            'columns': "Date, 'Country,Other', Population, Continent",
            'table_name': 'Country_info'
        },
        {
            'columns': "Date, 'Country,Other', Population, human_development_index, life_expectancy, male_smokers, female_smokers, median_age",
            'table_name': 'Population_Health'
        },
        {
            'columns': "Date, 'Country,Other', Population, new_vaccinations, total_vaccinations, people_vaccinated, TotalCases, TotalDeaths, TotalRecovered, ActiveCases",
            'table_name': 'Pandemic'
        }
    ]

    # Iterate through the list of dictionaries and create tables
    for config in table_configs:
        columns_to_select = config['columns']
        table_name = config['table_name']
        # Create the SQL query
        query = f"CREATE TABLE {table_name} AS SELECT {columns_to_select} FROM Merged"
        # Drop the table if it already exists
        con.execute(f'DROP TABLE IF EXISTS {table_name}')
        # Execute the SQL query to create the new table
        con.execute(query)

    con.close()
